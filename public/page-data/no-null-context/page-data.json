{"componentChunkName":"component---src-templates-answer-layout-js","path":"/no-null-context/","result":{"data":{"mdx":{"frontmatter":{"title":"Context without default value","date":"2019 December 9th","category":"typescript","author":"Nenad Marinkovic"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Context without default value\",\n  \"date\": \"2019-12-09T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"typescript\",\n  \"author\": \"Nenad Marinkovic\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Text, {\n    mdxType: \"Text\"\n  }, \"A helper to create a context without the need for setting a default undefined value. This enables us to create our context and use it without checking it for undefined everywhere.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"    function useCreateNoNullContext<T>(contextName: string) {\\n    const context = React.createContext<T | undefined>(undefined);\\n\\n    function useNoNullContext() {\\n        const noNullContext = React.useContext(context);\\n        if (!noNullContext) {\\n        throw new Error(`${contextName} must be used inside a provider with a value`);\\n        }\\n        return noNullContext;\\n    }\\n    return [useNoNullContext, context.Provider] as const;\\n    }\\n\")), mdx(Text, {\n    mdxType: \"Text\"\n  }, \"Example usage: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"    Open Sansface ContextValues {\\n        isValue: boolean;\\n        setValue: React.Dispatch<React.SetStateAction<boolean>>;\\n    }\\n\\n    const [useContextValue, ContextValueProvider] = useCreateNoNullContext<ContextValues>('useContextValue');\\n\")), mdx(Text, {\n    mdxType: \"Text\"\n  }, \"useCreateNoNullContext returns a context hook and a provider. These can be named anything but the order is important as the first item is the context hook, while the second is the provider component. They can then be accessed like so: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"const {isValue, setValue} = useContextValue();\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"","fields":{"slug":"/no-null-context/","editLink":"https://github.com/nenadmarinkovic/reuse.codes/edit/masterF:/#F Nenad Marinkovic/reuse.codes/content/typescript/no-null-context.mdx"}}},"pageContext":{"slug":"/no-null-context/","previous":{"id":"d35dc06e-7224-538e-945b-1b6a72e1b9ca","excerpt":"","frontmatter":{"title":"Center <div>","date":"2019-12-06T00:00:00.000Z","category":"css","author":"Nenad Marinkovic"},"fields":{"slug":"/center-div/"}},"next":{"id":"e75937d3-1264-58cc-87a5-8f2261fe9f2d","excerpt":"","frontmatter":{"title":"Setup JSX support in emmet","date":"2020-01-17T00:00:00.000Z","category":"vs-code","author":"Nenad Marinkovic"},"fields":{"slug":"/jsx-support-emmet/"}}}},"staticQueryHashes":["4278130389"]}